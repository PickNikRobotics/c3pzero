<?xml version="1.0"?>
<robot name="c3pzero" xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:property name="simulation" default="true" />

  <!-- Define robot constants -->
  <xacro:property name="base_width" value="0.46"/>
  <xacro:property name="base_length" value="0.812"/>
  <xacro:property name="base_height" value="0.28"/>

  <xacro:property name="wheel_radius" value="0.1715"/>
  <xacro:property name="wheel_width" value="0.07"/>
  <xacro:property name="wheel_track" value="0.540"/>

  <xacro:property name="caster_xoff" value="0.65"/>

  <!-- Define some commonly used inertial properties  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="${-base_length/2 + 0.177} 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>
  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>
  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0.05 0"/> <!-- pitch the mesh because the casters are below the level line. TODO marqrazz fix this -->
      <geometry>
        <mesh filename="file://$(find c3pzero_description)/urdf/meshes/c300_base_link.dae"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="${-base_length/2 + 0.077} 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="15" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>

  <!-- Robot Footprint -->
  <link name="base_footprint">
    <xacro:box_inertia m="0" w="0" d="0" h="0"/>
  </link>
  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 ${-wheel_radius}" rpy="0 0 0"/>
  </joint>

  <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
      	<origin xyz="0 0 0" rpy="${pi/2 + y_reflect * pi/2} 0 0"/>
        <geometry>
          <mesh filename="file://$(find c3pzero_description)/urdf/meshes/wheel_link.dae"/>
      </geometry>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="0 ${y_reflect*wheel_track/2} 0" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <xacro:wheel prefix="drivewhl_l" x_reflect="1" y_reflect="1" />
  <gazebo reference="drivewhl_l_link">
    <mu1>100000.0</mu1>
    <mu2>100000.0</mu2>
    <kp>1e+5</kp>
    <kd>1</kd>
    <soft_cfm>0</soft_cfm>
    <soft_erp>0.2</soft_erp>
    <minDepth>0.001</minDepth>
    <selfCollide>true</selfCollide>
    <gravity>true</gravity>
  </gazebo>

  <xacro:wheel prefix="drivewhl_r" x_reflect="1" y_reflect="-1" />
  <gazebo reference="drivewhl_r_link">
    <mu1>100000.0</mu1>
    <mu2>100000.0</mu2>
    <kp>1e+5</kp>
    <kd>1</kd>
    <soft_cfm>0</soft_cfm>
    <soft_erp>0.2</soft_erp>
    <minDepth>0.001</minDepth>
    <selfCollide>true</selfCollide>
    <gravity>true</gravity>
  </gazebo>

  <link name="rr_caster">
    <visual>
      <geometry>
        <sphere radius="${(wheel_radius-(base_height/2))}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${(wheel_radius-(base_height/2))}"/>
      </geometry>
    </collision>

    <xacro:sphere_inertia m="0.5" r="${(wheel_radius-(base_height/2))}"/>
  </link>

  <gazebo reference="rr_caster">
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <kp>1e+5</kp>
    <kd>1</kd>
    <soft_cfm>0</soft_cfm>
    <soft_erp>0.2</soft_erp>
    <minDepth>0.001</minDepth>
    <selfCollide>true</selfCollide>
    <gravity>true</gravity>
  </gazebo>

  <joint name="rr_caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="rr_caster"/>
    <origin xyz="${-caster_xoff} 0.193 ${-(base_height/2)}" rpy="0 0 0"/>
  </joint>

  <link name="lr_caster">
    <visual>
      <geometry>
        <sphere radius="${(wheel_radius-(base_height/2))}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${(wheel_radius-(base_height/2))}"/>
      </geometry>
    </collision>

    <xacro:sphere_inertia m="0.5" r="${(wheel_radius-(base_height/2))}"/>
  </link>

  <gazebo reference="lr_caster">
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <kp>1e+5</kp>
    <kd>1</kd>
    <soft_cfm>0</soft_cfm>
    <soft_erp>0.2</soft_erp>
    <minDepth>0.001</minDepth>
    <selfCollide>true</selfCollide>
    <gravity>true</gravity>
  </gazebo>

  <joint name="lr_caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lr_caster"/>
    <origin xyz="${-caster_xoff} -0.193 ${-(base_height/2)}" rpy="0 0 0"/>
  </joint>

  <!-- Robot's platform for arm mounting and holding containers/totes -->
  <link name="platform_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length - 0.2} ${base_width} 0.05"/>
      </geometry>
      <material name="Blue">
        <color rgba="0 0 1.0 0.3"/>
      </material>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length - 0.2} ${base_width} 0.05"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="15" w="${base_width}" d="${base_length - 0.2}" h="0.05"/>
  </link>

  <joint name="platform_joint" type="fixed">
    <parent link="base_link"/>
    <child link="platform_link"/>
    <origin xyz="-0.2 0 0.3" rpy="0 0 0"/>
  </joint>

  <link name="lidar_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.125"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.0508" length="0.055"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.0508" length="0.055"/>
      </geometry>
    </visual>
  </link>

  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin xyz="0 0 0.19" rpy="0 0 0"/>
  </joint>

  <xacro:if value="$(arg simulation)">
    <gazebo reference="lidar_link">
      <!-- Lidar Sensor -->
      <sensor name="lidar" type="gpu_lidar">
        <update_rate>5</update_rate>
        <visualize>true</visualize>
        <always_on>true</always_on>
        <topic>scan</topic>
        <lidar>
          <scan>
            <horizontal>
              <samples>360</samples>
              <resolution>1</resolution>
              <min_angle>0.0</min_angle>
              <max_angle>6.280000</max_angle>
            </horizontal>
            <vertical>
              <samples>1</samples>
              <resolution>1</resolution>
              <min_angle>0.0</min_angle>
              <max_angle>0.0</max_angle>
            </vertical>
          </scan>
          <range>
            <min>0.05</min>
            <max>20</max>
            <resolution>0.015000</resolution>
          </range>
        </lidar>
      </sensor>
    </gazebo>

    <gazebo reference="base_link">
      <!-- Base IMU (Accel + Gyro) -->
      <sensor name="imu" type="imu">
        <always_on>1</always_on>
        <update_rate>25</update_rate>
        <visualize>false</visualize>
        <topic>imu</topic>
        <imu>
          <!-- 0.0625/2000 -->
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.00003125</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.00003125</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.00003125</stddev>
              </noise>
            </z>
          </angular_velocity>
          <!-- 20/2000 noise -->
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.01</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.01</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.01</stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
      </sensor>
    </gazebo>

    <gazebo>
        <!-- Ground Truth Odometry Publisher -->
        <plugin filename="ignition-gazebo-odometry-publisher-system" name="ignition::gazebo::systems::OdometryPublisher">
          <odom_publish_frequency>50</odom_publish_frequency>
          <odom_topic>/odom</odom_topic>
          <odom_frame>odom</odom_frame>
          <robot_base_frame>base_link</robot_base_frame>
          <dimensions>3</dimensions>
        </plugin>

        <!-- Joint States -->
        <plugin filename="libignition-gazebo-joint-state-publisher-system.so" name="ignition::gazebo::systems::JointStatePublisher"/>

        <!-- Diff Drive -->
        <plugin filename="libignition-gazebo-diff-drive-system.so" name="ignition::gazebo::systems::DiffDrive">
          <left_joint>drivewhl_l_joint</left_joint>
          <right_joint>drivewhl_r_joint</right_joint>
          <wheel_separation>0.54</wheel_separation>
          <wheel_radius>0.1716</wheel_radius>
          <odom_publish_frequency>10</odom_publish_frequency>
          <topic>cmd_vel</topic>
          <frame_id>wheel_odom</frame_id>
          <child_frame_id>base_link</child_frame_id>
          <odom_topic>/wheel/odom</odom_topic>
        </plugin>

    </gazebo>
  </xacro:if>

</robot>
